/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from 'ionic-angular/components/checkbox/checkbox';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from 'ionic-angular/config/config';
import * as import9 from 'ionic-angular/util/form';
import * as import10 from 'ionic-angular/components/item/item';
import * as import11 from '@angular/core/src/linker/element_ref';
import * as import12 from '@angular/forms/src/directives/control_value_accessor';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from 'ionic-angular/components/button/button';
import * as import16 from '../button/button.ngfactory';
var renderType_Checkbox_Host = null;
var _View_Checkbox_Host0 = (function (_super) {
    __extends(_View_Checkbox_Host0, _super);
    function _View_Checkbox_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_Checkbox_Host0, renderType_Checkbox_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    Object.defineProperty(_View_Checkbox_Host0.prototype, "_NG_VALUE_ACCESSOR_0_5", {
        get: function () {
            if ((this.__NG_VALUE_ACCESSOR_0_5 == null)) {
                (this.__NG_VALUE_ACCESSOR_0_5 = [this._Checkbox_0_4]);
            }
            return this.__NG_VALUE_ACCESSOR_0_5;
        },
        enumerable: true,
        configurable: true
    });
    _View_Checkbox_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('ion-checkbox', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_Checkbox0(this.viewUtils, this.injector(0), this._appEl_0);
        this._Checkbox_0_4 = new import3.Checkbox(this.parentInjector.get(import8.Config), this.parentInjector.get(import9.Form), this.parentInjector.get(import10.Item, null), new import11.ElementRef(this._el_0), this.renderer);
        this._appEl_0.initComponent(this._Checkbox_0_4, [], compView_0);
        compView_0.create(this._Checkbox_0_4, this.projectableNodes, null);
        var disposable_0 = this.renderer.listen(this._el_0, 'click', this.eventHandler(this._handle_click_0_0.bind(this)));
        this._expr_1 = import7.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [disposable_0], []);
        return this._appEl_0;
    };
    _View_Checkbox_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.Checkbox) && (0 === requestNodeIndex))) {
            return this._Checkbox_0_4;
        }
        if (((token === import12.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) {
            return this._NG_VALUE_ACCESSOR_0_5;
        }
        return notFoundResult;
    };
    _View_Checkbox_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._Checkbox_0_4.ngAfterContentInit();
            }
        }
        var currVal_1 = this._Checkbox_0_4._disabled;
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementClass(this._el_0, 'checkbox-disabled', currVal_1);
            this._expr_1 = currVal_1;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_Checkbox_Host0.prototype.destroyInternal = function () {
        this._Checkbox_0_4.ngOnDestroy();
    };
    _View_Checkbox_Host0.prototype._handle_click_0_0 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._Checkbox_0_4._click($event) !== false);
        return (true && pd_0);
    };
    return _View_Checkbox_Host0;
}(import1.AppView));
function viewFactory_Checkbox_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_Checkbox_Host === null)) {
        (renderType_Checkbox_Host = viewUtils.createRenderComponentType('', 0, import13.ViewEncapsulation.None, [], {}));
    }
    return new _View_Checkbox_Host0(viewUtils, parentInjector, declarationEl);
}
export var CheckboxNgFactory = new import14.ComponentFactory('ion-checkbox', viewFactory_Checkbox_Host0, import3.Checkbox);
var styles_Checkbox = [];
var renderType_Checkbox = null;
var _View_Checkbox0 = (function (_super) {
    __extends(_View_Checkbox0, _super);
    function _View_Checkbox0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_Checkbox0, renderType_Checkbox, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_Checkbox0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'checkbox-icon');
        this._el_1 = this.renderer.createElement(this._el_0, 'div', null);
        this.renderer.setElementAttribute(this._el_1, 'class', 'checkbox-inner');
        this._el_2 = this.renderer.createElement(parentRenderNode, 'button', null);
        this.renderer.setElementAttribute(this._el_2, 'class', 'item-cover');
        this.renderer.setElementAttribute(this._el_2, 'ion-button', 'item-cover');
        this.renderer.setElementAttribute(this._el_2, 'role', 'checkbox');
        this.renderer.setElementAttribute(this._el_2, 'type', 'button');
        this._appEl_2 = new import2.AppElement(2, null, this, this._el_2);
        var compView_2 = import16.viewFactory_Button0(this.viewUtils, this.injector(2), this._appEl_2);
        this._Button_2_4 = new import15.Button(null, 'item-cover', this.parentInjector.get(import8.Config), new import11.ElementRef(this._el_2), this.renderer);
        this._appEl_2.initComponent(this._Button_2_4, [], compView_2);
        this._text_3 = this.renderer.createText(null, ' ', null);
        compView_2.create(this._Button_2_4, [[].concat([this._text_3])], null);
        this._expr_0 = import7.UNINITIALIZED;
        this._expr_1 = import7.UNINITIALIZED;
        this._expr_2 = import7.UNINITIALIZED;
        this._expr_3 = import7.UNINITIALIZED;
        this._expr_4 = import7.UNINITIALIZED;
        this.init([], [
            this._el_0,
            this._el_1,
            this._el_2,
            this._text_3
        ], [], []);
        return null;
    };
    _View_Checkbox0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import15.Button) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._Button_2_4;
        }
        return notFoundResult;
    };
    _View_Checkbox0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._Button_2_4.ngAfterContentInit();
            }
        }
        var currVal_0 = this.context._checked;
        if (import4.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementClass(this._el_0, 'checkbox-checked', currVal_0);
            this._expr_0 = currVal_0;
        }
        var currVal_1 = this.context.id;
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementProperty(this._el_2, 'id', currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this.context._checked;
        if (import4.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this.renderer.setElementAttribute(this._el_2, 'aria-checked', ((currVal_2 == null) ? null : currVal_2.toString()));
            this._expr_2 = currVal_2;
        }
        var currVal_3 = this.context._labelId;
        if (import4.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setElementAttribute(this._el_2, 'aria-labelledby', ((currVal_3 == null) ? null : currVal_3.toString()));
            this._expr_3 = currVal_3;
        }
        var currVal_4 = this.context._disabled;
        if (import4.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementAttribute(this._el_2, 'aria-disabled', ((currVal_4 == null) ? null : currVal_4.toString()));
            this._expr_4 = currVal_4;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_Checkbox0;
}(import1.AppView));
export function viewFactory_Checkbox0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_Checkbox === null)) {
        (renderType_Checkbox = viewUtils.createRenderComponentType('/home/nicolas/projects/cloudtripper/cloudtripper-frontend/node_modules/ionic-angular/components/checkbox/checkbox.d.ts class Checkbox - inline template', 0, import13.ViewEncapsulation.None, styles_Checkbox, {}));
    }
    return new _View_Checkbox0(viewUtils, parentInjector, declarationEl);
}
